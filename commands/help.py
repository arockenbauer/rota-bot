import discord
from discord.ext import commands
from discord import app_commands

class HelpCommand(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @app_commands.command(name="help", description="Affiche ce message d'aide.")
    async def help(self, interaction: discord.Interaction):
        try:
            # Cr√©ation des embeds pour chaque cat√©gorie
            embeds = {
                "Gestion": discord.Embed(
                    title="üõ†Ô∏è Commandes de Gestion",
                    description=(
                        "‚Ä¢ **`addrole`** : Ajouter un r√¥le √† un utilisateur. \n"
                        "‚Ä¢ **`removerole`** : Retirer un r√¥le √† un utilisateur. \n"
                        "‚Ä¢ **`lock`** : Verrouille un salon. \n"
                        "‚Ä¢ **`unlock`** : D√©verrouille un salon. \n"
                        "‚Ä¢ **`send`** : Envoie un message sp√©cifique dans un salon sp√©cifique. \n"
                        "‚Ä¢ **`clear`** : Supprime un certain nombre de messages dans un salon. \n"
                        "‚Ä¢ **`setbump`** : D√©finit le salon o√π les bumps arriveront. \n"
                        "‚Ä¢ **`config`** : D√©finit le message envoy√© lors d'un bump. \n"
                        "‚Ä¢ **`reinit_server`** : R√©initialise et restructure le serveur. \n"
                        "‚Ä¢ **`counter`** : Active le mode compteur dans le salon sp√©cifi√©. \n"
                        "‚Ä¢ **`remove_counter`** : Supprime le mode compteur. \n"
                        "‚Ä¢ **`raidmode`** : Active ou d√©sactive le mode raid\n"
                        "‚Ä¢ **`raid_config`** : Configure l'anti-raid.\n"
                    ),
                    color=discord.Color.blurple()
                ),
                "Mod√©ration": discord.Embed(
                    title="üõ°Ô∏è Commandes de Mod√©ration",
                    description=(
                        "‚Ä¢ **`warn`** : Envoie un avertissement en message priv√© √† un utilisateur. \n"
                        "‚Ä¢ **`ban`** : Bannit un utilisateur sp√©cifi√©. \n"
                        "‚Ä¢ **`unban`** : D√©bannit un utilisateur √† l'aide de son nom ou ID. \n"
                        "‚Ä¢ **`mute`** : R√©duit au silence un utilisateur. \n"
                        "‚Ä¢ **`unmute`** : Retire le mute d'un utilisateur. \n"
                        "‚Ä¢ **`ticket`** : Lance le syst√®me de tickets. \n"
                        "‚Ä¢ **`fermer`** : Ferme un ticket. \n"
                        "‚Ä¢ **`badword`** : G√®re les mots interdits. \n"
                    ),
                    color=discord.Color.red()
                ),
                "Informations": discord.Embed(
                    title="üîç Commandes d'Informations",
                    description=(
                        "‚Ä¢ **`status`** : Affiche les informations sur le statut du bot. \n"
                        "‚Ä¢ **`boosters`** : Affiche les membres ayant boost√© le serveur. \n"
                        "‚Ä¢ **`avatar`** : Montre l'avatar d'un utilisateur. \n"
                        "‚Ä¢ **`roleinfo`** : Affiche des informations sur un r√¥le sp√©cifique. \n"
                        "‚Ä¢ **`stats`** : Affiche les statistiques simplifi√©es du serveur. \n"
                    ),
                    color=discord.Color.green()
                ),
                "Utilitaires": discord.Embed(
                    title="üîß Commandes Utilitaires",
                    description=(
                        "‚Ä¢ **`rappel`** : Gestion des rappels. \n"
                        "‚Ä¢ **`bump`** : Bump tous les serveurs configur√©s. \n"
                        "‚Ä¢ **`candid`** : Envoie la candidature pour Helpeur, Mod√©rateur ou Admin. \n"
                    ),
                    color=discord.Color.gold()
                )
            }

            # Ajout d'une image g√©n√©rique et du footer √† chaque embed
            for embed in embeds.values():
                embed.set_thumbnail(url=self.bot.user.avatar.url)
                embed.set_footer(text=f"Demand√© par {interaction.user}", icon_url=interaction.user.avatar.url)

            # Menu d√©roulant
            class HelpDropdown(discord.ui.Select):
                def __init__(self):
                    options = [
                        discord.SelectOption(label="Gestion", description="Voir les commandes de gestion", emoji="üõ†Ô∏è"),
                        discord.SelectOption(label="Mod√©ration", description="Voir les commandes de mod√©ration", emoji="üõ°Ô∏è"),
                        discord.SelectOption(label="Informations", description="Voir les commandes d'informations", emoji="üîç"),
                        discord.SelectOption(label="Utilitaires", description="Voir les commandes utilitaires", emoji="üîß"),
                    ]
                    super().__init__(placeholder="Choisissez une cat√©gorie...", options=options)

                async def callback(self, interaction: discord.Interaction):
                    # R√©cup√®re la s√©lection et met √† jour le message avec l'embed correspondant
                    selected_category = self.values[0]
                    await interaction.response.edit_message(embed=embeds[selected_category])

            class HelpView(discord.ui.View):
                def __init__(self):
                    super().__init__()
                    self.add_item(HelpDropdown())

            # Envoi du premier embed avec la vue
            await interaction.response.send_message(content=f"{interaction.user.mention}, voici mes commandes !", embed=embeds["Gestion"], view=HelpView())
        except Exception as e:
            print(e)

# Ajouter la classe √† un fichier principal
async def setup(bot):
    await bot.add_cog(HelpCommand(bot))